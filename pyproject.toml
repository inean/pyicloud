
[project]
    authors = [
        { name = "Carlos Martín", email = "inean.es@gmail.com" },
        { name = "Peter Evans", email = "evans.peter@gmail.com" },
    ]
    description = "Anyio PyiCloud is a module that allows Python developers to interact with iCloud web services asynchronously."
    name = "anyio-pyicloud"

    # Project metadata
    keywords = ["anyio", "find-my-iphone", "icloud"]
    license  = { text = "MIT" }
    readme   = "README.md"

    # Assume python 3.10 or later, but allow for later versions.
    requires-python = ">=3.10"

    # Project dependencies.
    dependencies = [
        "anyio>=4.3.0",
        "asyncclick>=8.1.7.1",
        "click>=7.1.2",
        "httpx>=0.27.0",
        "pyyaml>=6.0.1",
    ]
    # Dyamic metadata provuded by PDM
    dynamic = ["version"]

    classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python",
        "Topic :: Software Development :: Libraries",
    ]
    maintainers = [{ name = "The PyiCloud Authors" }]

    [project.urls]
        Changelog = "https://github.com/inean/releases"
        Homepage  = "https://github.com/inean/pyicloud"

    [project.scripts]
        icloud = "pyicloud.cmdline:main"

[build-system]
    # Build backend
    build-backend = "pdm.backend"
    requires      = ["pdm-backend"]

[tool.pdm]
    # Whether the project is a package or not.
    distribution = true

    [tool.pdm.version]
        source         = "scm"
        write_template = "version = '{}'"
        write_to       = "pyicloud/_version.py"

    [tool.pdm.dev-dependencies]
        dev = [
            "pre-commit>=3.6.2",
            "ruff>=0.3.0",
            #asd
        ]
        test = [
            "pytest-cov>=4.1",
            "pytest>=8.0.1",
            "tox-pdm>=0.7.2",
            #asd
        ]

    [tool.pdm.scripts]
        coverage = { shell = "coverage run -m pyicloud.cmdline {args} && coverage xml && coverage report" }

[tool.ruff]
    # Exclude common directories and files from linting and formatting.
    exclude = [
        ".git",
        ".tox",
        ".venv",
        # asd
    ]
    indent-width = 4
    line-length = 120

    [tool.ruff.format]
        # Like Black, use double quotes for strings.
        quote-style = "double"

        # Like Black, indent with spaces, rather than tabs.
        indent-style = "space"

        # Like Black, respect magic trailing commas.
        skip-magic-trailing-comma = false

        # Like Black, automatically detect the appropriate line ending.
        line-ending = "auto"

        # Enable auto-formatting of code examples in docstrings. Markdown,
        # reStructuredText code/literal blocks and doctests are all supported.
        #
        # This is currently disabled by default, but it is planned for this
        # to be opt-out in the future.
        docstring-code-format = true

        # Set the line length limit used when formatting code snippets in
        # docstrings.
        #
        # This only has an effect when the `docstring-code-format` setting is
        # enabled.
        docstring-code-line-length = "dynamic"

    [tool.ruff.lint]
        # Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
        # Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
        # McCabe complexity (`C901`) by default.
        # Also enable `B` codes from pycodestyle.
        ignore = []
        select = ["B", "E4", "E7", "E9", "F"]

        # Allow fix for all enabled rules (when `--fix`) is provided.
        fixable = ["ALL"]

        # Avoid trying to fix flake8-bugbear (`B`) violations.
        unfixable = ["B"]

        # Allow unused variables when underscore-prefixed.
        dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

        # Allow import module level import not at top of file
        [tool.ruff.lint.per-file-ignores]
            "**/__init__.py" = ["E402"]

[tool.tox]
    legacy_tox_ini = """

[tox]
    # Project details
    min_version = 4.0
    isolated_build = True
    envlist =  py310, ,py311, py312, lint

[testenv]
deps = pytest
commands = pytest

    [testenv:lint]
        deps = ruff
        commands = ruff .

[gh-actions]
    python =
        3.10: py310, lint
        3.11: py311
        3.12: py312

"""
